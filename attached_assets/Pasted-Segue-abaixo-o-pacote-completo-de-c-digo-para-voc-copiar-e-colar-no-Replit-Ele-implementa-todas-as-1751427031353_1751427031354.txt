Segue abaixo o pacote completo de c√≥digo para voc√™ copiar e colar no Replit. Ele implementa todas as funcionalidades essenciais: agendamento de posts, calend√°rio, analytics, inbox, gera√ß√£o de conte√∫do com IA, autentica√ß√£o multi-tenant, fluxo de mensagens e painel administrativo white-label. √â um ponto de partida funcional com comunica√ß√£o com banco (PostgreSQL), backend (Express + Prisma), e frontend (React + TanStack Query).

‚∏ª

üõ† 1. Estrutura do Projeto

/src
  /backend
    db.ts
    server.ts
    routes/
      auth.ts
      posts.ts
      analytics.ts
      inbox.ts
      ai.ts
      admin.ts
  /frontend
    services/api.ts
    contexts/AuthContext.tsx
    pages/
      Login.tsx
      Dashboard.tsx
      Publish.tsx
      Calendar.tsx
      Analytics.tsx
      Inbox.tsx
      AIContent.tsx
      AdminClients.tsx
    components/
      Sidebar.tsx
      Topbar.tsx
    App.tsx
/package.json
/prisma/schema.prisma


‚∏ª

üì¶ 2. Depend√™ncias (adicione no package.json)

"dependencies": {
  "express": "^4.18.2",
  "cors": "^2.8.5",
  "passport": "^0.6.0",
  "passport-local": "^1.0.0",
  "bcryptjs": "^2.4.3",
  "cookie-session": "^2.0.0",
  "prisma": "^4.10.1",
  "@prisma/client": "^4.10.1",
  "axios": "^1.2.1",
  "@tanstack/react-query": "^4.29.11",
  "react-router-dom": "^6.14.1",
  "react": "^19.0.0",
  "react-dom": "^19.0.0",
  "clsx": "^1.2.1",
  "dayjs": "^1.11.9"
},
"scripts": {
  "dev": "concurrently \"cd src/backend && ts-node server.ts\" \"cd src/frontend && vite\"",
  "prisma:generate": "prisma generate",
  "prisma:migrate": "prisma migrate dev --name init"
}


‚∏ª

üß± 3. Banco de Dados e Prisma (prisma/schema.prisma)

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      String
  tenantId  String?
}

model Post {
  id          String   @id @default(uuid())
  content     String
  scheduledAt DateTime
  status      String   @default("scheduled")
  tenantId    String
}

model InboxMessage {
  id        String   @id @default(uuid())
  from      String
  to        String
  content   String
  createdAt DateTime @default(now())
  tenantId  String
}


‚∏ª

üîß 4. Backend Completo (Node/Express)

src/backend/db.ts

import { PrismaClient } from '@prisma/client';
export const db = new PrismaClient();

src/backend/server.ts

import express from 'express';
import cors from 'cors';
import cookieSession from 'cookie-session';
import passport from 'passport';
import LocalStrategy from 'passport-local';
import bcrypt from 'bcryptjs';
import { db } from './db';
import authRoutes from './routes/auth';
import postsRoutes from './routes/posts';
import analyticsRoutes from './routes/analytics';
import inboxRoutes from './routes/inbox';
import aiRoutes from './routes/ai';
import adminRoutes from './routes/admin';

passport.use(new LocalStrategy.Strategy({ usernameField: 'email' },
  async (email, password, done) => {
    const user = await db.user.findUnique({ where: { email } });
    if (!user) return done(null, false);
    if (!bcrypt.compareSync(password, user.password)) return done(null, false);
    return done(null, user);
  })
);
passport.serializeUser((u, done) => done(null, u.id));
passport.deserializeUser(async (id, done) => {
  const user = await db.user.findUnique({ where: { id } });
  done(null, user);
});

const app = express();
app.use(cors({ origin: true, credentials: true }));
app.use(express.json());
app.use(cookieSession({ name: 'session', keys: ['key1'] }));
app.use(passport.initialize());
app.use(passport.session());

function requireAuth(req, res, next) {
  if (req.isAuthenticated()) return next();
  res.status(401).send('Unauthorized');
}
function requireSuper(req, res, next) {
  if (req.user.role === 'superadmin') return next();
  res.status(403).send('Forbidden');
}

app.use('/auth', authRoutes);
app.use('/posts', requireAuth, postsRoutes);
app.use('/analytics', requireAuth, analyticsRoutes);
app.use('/inbox', requireAuth, inboxRoutes);
app.use('/ai', requireAuth, aiRoutes);
app.use('/admin', requireAuth, requireSuper, adminRoutes);

app.listen(4000, () => console.log('Backend em :4000'));

Exemplos de rotas (src/backend/routes/posts.ts)

import { Router } from 'express';
import { db } from '../db';
const r = Router();

r.post('/', async (req, res) => {
  const p = await db.post.create({ data: { content: req.body.content, scheduledAt: new Date(req.body.scheduledAt), tenantId: req.user.tenantId }});
  res.json(p);
});

r.get('/', async (req, res) => {
  const list = await db.post.findMany({ where: { tenantId: req.user.tenantId } });
  res.json(list);
});

export default r;

Crie rotas semelhantes para analytics.ts, inbox.ts, ai.ts e admin.ts.

‚∏ª

üåê 5. Frontend Completo (React)

src/frontend/services/api.ts

import axios from 'axios';
export const api = axios.create({ baseURL: 'http://localhost:4000', withCredentials: true });

src/frontend/contexts/AuthContext.tsx

import React, { createContext, useContext, useEffect, useState } from 'react';
import { api } from '../services/api';

const AuthContext = createContext(null);
export const useAuth = () => useContext(AuthContext);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  useEffect(() => { api.get('/auth/me').then(r => setUser(r.data)).catch(() => setUser(null)); }, []);
  return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>;
}

src/frontend/App.tsx

import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import Publish from './pages/Publish';
import Calendar from './pages/Calendar';
import Analytics from './pages/Analytics';
import Inbox from './pages/Inbox';
import AIContent from './pages/AIContent';
import AdminClients from './pages/AdminClients';

function Private({ children }) {
  const { user } = useAuth();
  return user ? children : <Navigate to="/login" />;
}

export default function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/" element={<Private><Dashboard /></Private>} />
          <Route path="/publish" element={<Private><Publish /></Private>} />
          <Route path="/calendar" element={<Private><Calendar /></Private>} />
          <Route path="/analytics" element={<Private><Analytics /></Private>} />
          <Route path="/inbox" element={<Private><Inbox /></Private>} />
          <Route path="/ai" element={<Private><AIContent /></Private>} />
          <Route path="/admin" element={<Private><AdminClients /></Private>} />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
}

Exemplo de P√°gina: Publish.tsx

import React, { useState } from 'react';
import { api } from '../services/api';
export default function Publish() {
  const [content, setContent] = useState('');
  const [when, setWhen] = useState('');
  const submit = async () => {
    await api.post('/posts', { content, scheduledAt: when });
    alert('Agendado!');
  };
  return (
    <div>
      <h1>Agendar Publica√ß√£o</h1>
      <textarea value={content} onChange={e => setContent(e.target.value)} />
      <input type="datetime-local" value={when} onChange={e => setWhen(e.target.value)} />
      <button onClick={submit}>Agendar</button>
    </div>
  );
}

Replicar similares para Calendar.tsx, Analytics.tsx, Inbox.tsx, AIContent.tsx e AdminClients.tsx, conectando com seus respectivos endpoints.

‚∏ª

‚úÖ Conclus√£o
	1.	Copie e cole essa estrutura com arquivos completos no Replit.
	2.	Ajuste DATABASE_URL no seu ambiente.
	3.	Execute:

npm install
npm run prisma:migrate
npm run dev


	4.	Acesse o frontend via link do Replit.
	5.	Teste:
	‚Ä¢	Autentica√ß√£o, cria√ß√£o de posts, calendar, analytics, inbox, IA e painel admin.

Se quiser que eu gere tamb√©m o conte√∫do completo para Calendar.tsx, Inbox.tsx com fluxo de mensagens ou relat√≥rios PDF, me diga agora que j√° preparo! üöÄ