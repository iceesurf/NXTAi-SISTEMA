import cron from 'node-cron';
import { storage } from '../server/storage.js';

console.log('‚è∞ Iniciando sistema de cron jobs para automa√ß√µes...');

// Cron para verificar automa√ß√µes a cada minuto
cron.schedule('* * * * *', async () => {
  try {
    // Buscar todas as automa√ß√µes ativas
    const tenants = await storage.getAllTenants();
    
    for (const tenant of tenants) {
      const automations = await storage.getAutomationsByTenant(tenant.id);
      const activeAutomations = automations.filter(a => a.isActive);
      
      if (activeAutomations.length > 0) {
        console.log(`üîÑ Verificando ${activeAutomations.length} automa√ß√µes ativas para tenant ${tenant.name}`);
        
        for (const automation of activeAutomations) {
          await processAutomation(automation, tenant);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå Erro no cron de automa√ß√µes:', error);
  }
});

// Cron para limpeza de sess√µes expiradas (a cada hora)
cron.schedule('0 * * * *', async () => {
  try {
    console.log('üßπ Executando limpeza de sess√µes expiradas...');
    // Aqui seria implementada a limpeza das sess√µes do banco
  } catch (error) {
    console.error('‚ùå Erro na limpeza de sess√µes:', error);
  }
});

// Cron para relat√≥rios di√°rios (todo dia √†s 9h)
cron.schedule('0 9 * * *', async () => {
  try {
    console.log('üìä Gerando relat√≥rios di√°rios...');
    const tenants = await storage.getAllTenants();
    
    for (const tenant of tenants) {
      await generateDailyReport(tenant);
    }
  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de relat√≥rios:', error);
  }
});

async function processAutomation(automation, tenant) {
  try {
    console.log(`ü§ñ Processando automa√ß√£o: ${automation.name} (Tenant: ${tenant.name})`);
    
    // Aqui seria implementada a l√≥gica espec√≠fica de cada automa√ß√£o
    // Por exemplo: envio de emails, webhooks, notifica√ß√µes, etc.
    
    const config = JSON.parse(automation.config || '{}');
    
    switch (automation.trigger) {
      case 'time_based':
        await processTimeBased(automation, config, tenant);
        break;
      case 'lead_status_change':
        await processLeadStatusChange(automation, config, tenant);
        break;
      case 'campaign_completion':
        await processCampaignCompletion(automation, config, tenant);
        break;
      default:
        console.log(`‚ÑπÔ∏è Trigger n√£o implementado: ${automation.trigger}`);
    }
    
    // Atualizar √∫ltima execu√ß√£o
    await storage.updateAutomation(automation.id, {
      lastExecuted: new Date()
    });
    
  } catch (error) {
    console.error(`‚ùå Erro processando automa√ß√£o ${automation.name}:`, error);
  }
}

async function processTimeBased(automation, config, tenant) {
  console.log(`‚è∞ Processando automa√ß√£o baseada em tempo: ${automation.name}`);
  // Implementar l√≥gica de automa√ß√£o baseada em tempo
}

async function processLeadStatusChange(automation, config, tenant) {
  console.log(`üë§ Verificando mudan√ßas de status de leads para: ${automation.name}`);
  // Implementar l√≥gica de automa√ß√£o baseada em mudan√ßa de status
}

async function processCampaignCompletion(automation, config, tenant) {
  console.log(`üìß Verificando campanhas conclu√≠das para: ${automation.name}`);
  // Implementar l√≥gica de automa√ß√£o p√≥s-campanha
}

async function generateDailyReport(tenant) {
  try {
    console.log(`üìä Gerando relat√≥rio di√°rio para: ${tenant.name}`);
    
    const stats = {
      leads: await storage.getLeadsByTenant(tenant.id),
      campaigns: await storage.getCampaignsByTenant(tenant.id),
      conversations: await storage.getConversationsByTenant(tenant.id)
    };
    
    console.log(`üìà Relat√≥rio ${tenant.name}: ${stats.leads.length} leads, ${stats.campaigns.length} campanhas, ${stats.conversations.length} conversas`);
    
    // Aqui seria implementado o envio do relat√≥rio por email se configurado
    
  } catch (error) {
    console.error(`‚ùå Erro gerando relat√≥rio para ${tenant.name}:`, error);
  }
}

console.log('‚úÖ Sistema de cron jobs iniciado com sucesso!');
console.log('üìÖ Tarefas agendadas:');
console.log('  - Verifica√ß√£o de automa√ß√µes: a cada minuto');
console.log('  - Limpeza de sess√µes: a cada hora');
console.log('  - Relat√≥rios di√°rios: todo dia √†s 9h');

export {
  processAutomation,
  generateDailyReport
};